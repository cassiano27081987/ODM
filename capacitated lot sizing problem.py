###### capacitated lot sizing problem ####
#### Solver: CPLEX ####


import cplex

# INDICES
T = 3  # number of periods
N = 100  # number of items
M = 500  # big M

# PARAMETERS
c_it =  [[4, 9, 2], [1, 6, 8], [2, 5, 1], [8, 4, 4], [5, 2, 8], [8, 5, 9], [8, 1, 2], [5, 5, 7], [3, 5, 7], [6, 3, 7], [4, 1, 3], [7, 3, 6], [6, 8, 1], [3, 6, 3], [1, 6, 6], [6, 4, 1], [5, 8, 1], [7, 1, 4], [1, 9, 1], [6, 9, 8], [1, 4, 4], [5, 4, 1], [3, 1, 7], [3, 5, 2], [4, 8, 1], [1, 6, 4], [5, 8, 2], [7, 6, 8], [8, 5, 7], [9, 7, 1], [6, 1, 9], [1, 5, 2], [5, 8, 9], [8, 6, 6], [3, 7, 5], [4, 6, 3], [6, 6, 6], [5, 2, 8], [3, 8, 6], [6, 7, 4], [7, 6, 1], [1, 3, 4], [9, 5, 8], [5, 2, 7], [3, 9, 4], [5, 1, 6], [8, 7, 2], [8, 8, 1], [8, 5, 2], [6, 8, 9], [9, 5, 2], [1, 5, 4], [2, 4, 6], [4, 4, 5], [4, 6, 7], [9, 4, 4], [3, 9, 8], [5, 6, 2], [1, 3, 3], [6, 2, 6], [7, 4, 5], [5, 5, 6], [4, 1, 9], [1, 2, 7], [7, 3, 1], [6, 6, 9], [4, 5, 1], [1, 3, 3], [4, 3, 4], [9, 9, 8], [2, 8, 4], [3, 1, 6], [4, 5, 6], [2, 4, 2], [8, 7, 8], [1, 1, 5], [3, 2, 1], [2, 2, 3], [1, 2, 9], [1, 2, 1], [2, 9, 5], [5, 8, 7], [1, 6, 7], [2, 8, 6], [7, 2, 5], [1, 3, 9], [4, 7, 2], [1, 1, 7], [6, 8, 6], [1, 3, 8], [2, 4, 6], [9, 1, 4], [5, 4, 6], [6, 7, 7], [7, 7, 1], [4, 7, 5], [4, 6, 5], [6, 9, 7], [3, 7, 7], [9, 5, 6]]
h_it =  [[2, 1, 2], [2, 1, 2], [2, 2, 2], [1, 2, 1], [2, 1, 1], [1, 1, 2], [2, 1, 2], [1, 2, 1], [1, 2, 2], [1, 1, 2], [2, 2, 2], [2, 2, 1], [2, 1, 2], [1, 2, 1], [2, 2, 2], [2, 1, 2], [1, 2, 2], [2, 1, 2], [2, 1, 2], [2, 2, 2], [2, 1, 2], [2, 2, 2], [1, 1, 2], [2, 1, 2], [2, 1, 1], [2, 1, 2], [2, 2, 2], [2, 1, 2], [2, 2, 2], [2, 2, 2], [2, 1, 2], [2, 2, 2], [2, 2, 1], [1, 1, 2], [2, 2, 2], [1, 2, 1], [2, 2, 2], [1, 1, 2], [2, 1, 1], [1, 2, 2], [1, 2, 1], [2, 2, 2], [2, 2, 1], [1, 1, 2], [1, 1, 1], [2, 1, 2], [2, 2, 2], [1, 2, 1], [1, 2, 2], [2, 1, 2], [2, 1, 1], [2, 2, 1], [1, 1, 1], [2, 2, 2], [2, 2, 1], [2, 2, 2], [1, 2, 1], [2, 1, 1], [1, 2, 2], [2, 2, 1], [2, 2, 1], [1, 2, 1], [1, 1, 2], [2, 2, 2], [2, 2, 2], [1, 1, 2], [1, 2, 1], [1, 1, 1], [2, 2, 2], [1, 2, 2], [2, 1, 1], [1, 1, 2], [2, 2, 1], [2, 1, 2], [2, 2, 2], [2, 1, 1], [1, 2, 2], [1, 2, 1], [1, 1, 1], [2, 2, 2], [2, 1, 1], [2, 1, 1], [1, 2, 2], [1, 1, 2], [2, 2, 2], [2, 2, 1], [2, 2, 1], [1, 1, 1], [1, 1, 2], [1, 2, 2], [1, 2, 2], [2, 2, 1], [2, 2, 1], [2, 2, 2], [2, 1, 1], [1, 2, 1], [2, 1, 1], [1, 2, 1], [1, 2, 1], [1, 1, 2]]
s_it
d_it =  [[74, 56, 88], [84, 54, 99], [71, 57, 54], [53, 69, 70], [94, 76, 84], [64, 65, 94], [60, 63, 72], [85, 81, 96], [56, 59, 61], [85, 67, 87], [57, 64, 85], [97, 87, 93], [74, 58, 58], [73, 84, 62], [61, 86, 82], [92, 71, 82], [75, 85, 52], [54, 94, 79], [59, 66, 50], [96, 76, 96], [57, 54, 88], [64, 91, 94], [91, 84, 62], [90, 70, 77], [55, 77, 64], [89, 72, 63], [63, 51, 99], [89, 96, 79], [53, 52, 93], [81, 94, 78], [74, 60, 59], [73, 60, 82], [60, 73, 73], [75, 91, 76], [85, 89, 72], [69, 91, 75], [67, 89, 61], [57, 67, 86], [56, 66, 72], [55, 99, 85], [89, 82, 68], [72, 89, 71], [90, 81, 88], [54, 81, 72], [69, 60, 78], [81, 74, 87], [60, 98, 92], [66, 77, 77], [82, 56, 57], [51, 73, 74], [52, 52, 59], [56, 69, 65], [61, 63, 65], [87, 78, 50], [65, 93, 67], [97, 52, 62], [68, 85, 98], [51, 67, 94], [79, 82, 58], [56, 89, 66], [61, 88, 56], [82, 98, 76], [72, 90, 91], [91, 92, 61], [73, 81, 87], [68, 82, 74], [62, 54, 98], [96, 99, 99], [89, 91, 92], [98, 98, 50], [75, 55, 96], [99, 84, 54], [96, 60, 51], [59, 98, 90], [57, 91, 94], [51, 64, 70], [64, 72, 82], [62, 58, 95], [91, 54, 95], [55, 93, 79], [67, 69, 82], [69, 85, 96], [88, 66, 96], [54, 55, 89], [75, 98, 74], [73, 93, 89], [56, 58, 70], [78, 64, 51], [85, 97, 80], [85, 61, 60], [82, 57, 60], [92, 52, 93], [65, 62, 51], [72, 70, 60], [76, 56, 64], [72, 82, 53], [51, 90, 85], [73, 81, 89], [50, 94, 93], [69, 79, 98]]
a_i =  [1, 3, 1, 1, 3, 2, 3, 3, 3, 3, 1, 1, 3, 2, 2, 2, 1, 1, 1, 3, 3, 2, 2, 1, 2, 3, 3, 2, 1, 3, 1, 3, 1, 2, 2, 3, 1, 1, 2, 2, 1, 2, 2, 2, 2, 2, 1, 1, 1, 2, 3, 1, 2, 2, 3, 1, 3, 1, 1, 1, 3, 1, 3, 1, 3, 2, 2, 3, 2, 1, 2, 1, 2, 3, 3, 3, 1, 3, 3, 2, 1, 1, 3, 3, 1, 2, 2, 1, 2, 3, 2, 3, 2, 3, 2, 2, 2, 1, 1, 2]

cap = 20000  # capacity of the machine


# DECISION VARIABLES

model = cplex.Cplex()  # Creates the object 'model' to Cplex

model.variables.add(names=["X_{0}_{1}".format(i, t)  # X_it: units of items i produced at period t
                           for i in range(N)
                           for t in range(T)],
                    types=['I'] * N * T)

model.variables.add(names=["I_{0}_{1}".format(i, t)  # I_it: units of items i holding at period t
                           for i in range(N)
                           for t in range(T)],
                    types=['C'] * N * T)

model.variables.add(names=["Y_{0}_{1}".format(i, t)  # Y_it = 1, if occurs production of item i at period t, 0 c.c
                           for i in range(N)
                           for t in range(T)],
                    types=['B'] * N * T)

#### CONSTRAINTS ####

# Constraint 1: It = It-1 + Xit - dit, 1 <= i <= N; 1 <= t <= T
for i in range(N):
    for t in range(T):
        if t < 1:
            _vars = ["X_{0}_{1}".format(i, t)] + ["I_{0}_{1}".format(i, t)]
            _coef = [1] + [-1]
            model.linear_constraints.add(
                lin_expr=[cplex.SparsePair(ind=_vars, val=_coef)],
                rhs=[d_it[i][t]],
                senses="E")
        else:
            _vars = ["X_{0}_{1}".format(i, t)] + ["I_{0}_{1}".format(i, t - 1)] + ["I_{0}_{1}".format(i, t)]
            _coef = [1] + [1] + [-1]
            model.linear_constraints.add(
                lin_expr=[cplex.SparsePair(ind=_vars, val=_coef)],
                rhs=[d_it[i][t]],
                senses="E")

# Constraint 2: sum_i (a_it * X_it <= Cap_t * Y_it), 1 <= t <= T
for t in range(T):
    _vars = ["X_{0}_{1}".format(i, t) for i in range(N)]
    _coef = [a_i[i] for i in range(N)]
    model.linear_constraints.add(lin_expr=[cplex.SparsePair(ind=_vars, val=_coef)],
                                 rhs=[cap], senses="L")

for t in range(T):
    for i in range(N):
        _vars = ["X_{0}_{1}".format(i, t)] + ["Y_{0}_{1}".format(i, t)]
        _coef = [1] + [-M]
        model.linear_constraints.add(
            lin_expr=[cplex.SparsePair(ind=_vars, val=_coef)],
            rhs=[0],
            senses="L")

# Objective Function
_vars = ["Y_{0}_{1}".format(i, t) for i in range(N) for t in range(T)] + \
        ["X_{0}_{1}".format(i, t) for i in range(N) for t in range(T)] + \
        ["I_{0}_{1}".format(i, t) for i in range(N) for t in range(T)]

_coef = [s_it[i][t] for i in range(N) for t in range(T)] + \
        [c_it[i][t] for i in range(N) for t in range(T)] + \
        [h_it[i][t] for i in range(N) for t in range(T)]

model.objective.set_linear(zip(_vars, _coef))
model.objective.set_sense(model.objective.sense.minimize)

model.solve()

print("Objective value: ", model.solution.get_objective_value(), "\n")  # print the Objective value

print("Xit")
for i in range(N):
    print("item: ", i)
    for t in range(T):
        print(model.solution.get_values("X_{0}_{1}".format(i, t)))

print("\nIit")
for i in range(N):
    print("item: ", i)
    for t in range(T):
        print(model.solution.get_values("I_{0}_{1}".format(i, t)))

print("\nYit")
for i in range(N):
    print("item: ", i)
    for t in range(T):
        print(model.solution.get_values("Y_{0}_{1}".format(i, t)))


for t in range(T):
    print("t =: ", t)
    soma = 0
    for i in range(N):
        soma = soma + a_i[i] * model.solution.get_values("X_{0}_{1}".format(i, t))
    print(soma)